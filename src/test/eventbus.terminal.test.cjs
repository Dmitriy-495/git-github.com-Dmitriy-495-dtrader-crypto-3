// src/test/eventbus.terminal.test.cjs
const termkit = require("terminal-kit");
const term = termkit.terminal;

const { EventBus } = require("../core/event-bus");
const { config } = require("../core/config");

// –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
term.clear();
term.hideCursor();
term.bold.cyan("‚ñ∂ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ EventBus —Å terminal-kit (CJS)\n\n");

const bus = new EventBus({ logAll: false });
const received = [];

// —Å–ø–∏–Ω–Ω–µ—Ä
const spinner = term.spinner({ text: "–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π..." });
spinner.start();

bus.on("bus:message", (payload) => {
  spinner.stop();
  term.green.bold("\n‚úî bus:message –ø–æ–ª—É—á–µ–Ω–æ:\n");
  term.white(`${JSON.stringify(payload, null, 2)}\n`);
  received.push({ event: "bus:message", payload });
  spinner.start();
});

bus.on("log", (payload) => {
  spinner.stop();
  term.green.bold("\n‚úî log –ø–æ–ª—É—á–µ–Ω–æ:\n");
  term.white(`${JSON.stringify(payload, null, 2)}\n`);
  received.push({ event: "log", payload });
  spinner.start();
});

// —Å–∏–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
setTimeout(() => {
  bus.emit("bus:message", {
    channel: "test-channel",
    payload: { foo: 42 },
  });
}, 1000);

setTimeout(() => {
  bus.emit("log", {
    level: "info",
    message: "Test log via CJS",
    meta: { timestamp: Date.now() },
  });
}, 2000);

setTimeout(() => {
  spinner.stop();
  term.showCursor();
  term("\n");

  try {
    console.assert(
      received.length === 2,
      `–û–∂–∏–¥–∞–ª–∏ 2 —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—É—á–∏–ª–∏ ${received.length}`
    );
    console.assert(received[0].event === "bus:message");
    console.assert(received[1].event === "log");
  } catch (err) {
    term.red.bold(`\n‚úñ –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${err.message}\n`);
    process.exit(1);
  }

  term.green.bold("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!\n");
  process.exit(0);
}, 3000);
