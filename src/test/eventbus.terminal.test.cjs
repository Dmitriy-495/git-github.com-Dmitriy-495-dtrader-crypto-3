// src/test/eventbus.terminal.test.cjs

// 1) –ü–æ–¥–∫–ª—é—á–∞–µ–º ts-node, —á—Ç–æ–±—ã require –º–æ–≥ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å .ts-—Ñ–∞–π–ª—ã
require('ts-node').register({
  project: './tsconfig.json',
  transpileOnly: true,
  extensions: ['.ts']
});

// 2) –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ require-–∏—Ç—å –≤–∞—à–∏ –º–æ–¥—É–ª–∏ —Å .ts-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
const termkit = require('terminal-kit');
const term = termkit.terminal;

// –≤–∞–∂–Ω–æ:–∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤ src/core ‚Äî event-bus.ts –∏ config.ts
const { EventBus } = require('../core/event-bus.ts');
const { config }   = require('../core/config.ts');

// 3) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
term.clear();
term.hideCursor();
term.bold.cyan('‚ñ∂ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ EventBus —Å terminal-kit\n\n');

const bus = new EventBus({ logAll: false });
const received = [];

// 4) –°–ø–∏–Ω–Ω–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
const spinner = term.spinner({ text: '–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...' });
spinner.start();

// 5) –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
bus.on('bus:message', payload => {
  spinner.stop();
  term.green.bold('\n‚úî bus:message –ø–æ–ª—É—á–µ–Ω–æ:\n');
  term.white(`${JSON.stringify(payload, null, 2)}\n`);
  received.push({ event: 'bus:message', payload });
  spinner.start();
});

bus.on('log', payload => {
  spinner.stop();
  term.green.bold('\n‚úî log –ø–æ–ª—É—á–µ–Ω–æ:\n');
  term.white(`${JSON.stringify(payload, null, 2)}\n`);
  received.push({ event: 'log', payload });
  spinner.start();
});

// 6) –≠–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
setTimeout(() => {
  bus.emit('bus:message', {
    channel: 'test-channel',
    payload: { foo: 42 }
  });
}, 1000);

setTimeout(() => {
  bus.emit('log', {
    level: 'info',
    message: 'Test log via ts-node+CJS',
    meta: { timestamp: Date.now() }
  });
}, 2000);

// 7) –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
setTimeout(() => {
  spinner.stop();
  term.showCursor();
  term('\n');

  try {
    console.assert(received.length === 2, `–û–∂–∏–¥–∞–ª–∏ 2 —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—É—á–∏–ª–∏ ${received.length}`);
    console.assert(received[0].event === 'bus:message', '–ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ‚Äî bus:message');
    console.assert(received[1].event === 'log', '–í—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ ‚Äî log');
  }
  catch (err) {
    term.red.bold(`\n‚úñ –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${err.message}\n`);
    process.exit(1);
  }

  term.green.bold('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!\n');
  process.exit(0);
}, 3000);
